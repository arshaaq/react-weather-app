[{"C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\index.js":"1","C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\App.js":"2","C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\components\\OutputLabel.js":"3"},{"size":235,"mtime":1689160095084,"results":"4","hashOfConfig":"5"},{"size":3859,"mtime":1690288948152,"results":"6","hashOfConfig":"5"},{"size":179,"mtime":1689898359168,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1u5tkx1",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\index.js",[],[],[],"C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\App.js",["19","20","21","22"],[],"import './styles/stylesheet.css'\nimport {gsap} from \"gsap\";\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport ScrollToPlugin from 'gsap/ScrollToPlugin';\n\n\nimport { useEffect, useState } from 'react';\nimport OutputLabel from './components/OutputLabel';\n\n\n\n\n\n\nfunction App() {\n\n//---------------------------------VARIABLES----------------------------------------------//\n  let apiKey = \"d9b264d793e700a901dc8f4a174c26a3\";\n\n  const[countryName, setCountryName] = useState('')\n  const[countries, setCountries] = useState([])\n  const[temperature, setTemperature] = useState('')\n  const[weather, setWeather] = useState('')\n\n\n  let pickedCountry = \"\";\n  let pickedWeather = \"\";\n  let pickedTemperature = \"\";\n\n\n  const apiUrl = `https://api.openweathermap.org/data/2.5/weather?units=metric&q=${countryName}&appid=${apiKey}`;\n\n//---------------------------------GSAP----------------------------------------------//\n\n\n\n//---------------------------------FUNCTIONS----------------------------------------------//\n\nconst backgroundChange = (weatherType) =>{\n \n if(weatherType.includes(\"clouds\")){\n  document.body.classList.remove(...document.body.classList);\n  document.body.classList.add('overcastClouds');\n  \n }else if(weatherType.includes(\"sky\")){\n  document.body.classList.remove(...document.body.classList);\n  document.body.classList.add('clearSky');\n\n}else if(weatherType.includes(\"mist\")){\n  document.body.classList.remove(...document.body.classList);\n  document.body.classList.add('mist');\n\n}else if(weatherType.includes(\"rain\")){\n  document.body.classList.remove(...document.body.classList);\n  document.body.classList.add('rain');\n\n}else{\n  document.body.classList.remove(...document.body.classList);\n }\n \n\n\n\n\n}\n\n\n\n  const getCountryData = () =>{\n    fetch('https://restcountries.com/v3.1/all')\n    .then(response=>{\n      return response.json()\n    }).then(data=>{;\n      setCountries(data);\n    })\n  }\n\n  const getCountryWeather = () =>{\n    fetch(apiUrl)\n    .then(response=>{\n      return response.json()\n    }).then(data =>{\n      setWeather(data.weather[0].description);\n      setTemperature(data.main.temp + \" degrees celsius\");\n      \n    });\n\n  }\n\n//gets country name\n  const handleChange = (event) =>{\n    setCountryName(event.target.value);\n  }\n\n  useEffect(() => {\n    getCountryData();\n  }, []);\n\n  const getCountryInformation = (filter) =>{\n    const weatherBox = document.getElementById('weather-box');\n    for(const country of countries){\n      //if there's a country name match with the API\n      if(country.name.common.toLowerCase() == filter.toLowerCase()){\n\n        getCountryWeather();\n        backgroundChange(weather);\n        pickedCountry = country.name.common;\n        pickedWeather = weather;\n        pickedTemperature = temperature;\n        \n\n        //set a delay so that info update doesn't look funky on the UI\n        setTimeout(() => {\n          weatherBox.classList.add('countryFound');\n        }, 100);\n        break;\n        \n      }else{\n        weatherBox.classList.remove('countryFound');\n        backgroundChange(\"\");\n      }\n    }\n  }\n\n\n//---------------------------------RENDER OUTPUT----------------------------------------------//\n  return (  \n    <>\n      <header className='header'>  \n      <form id='form-search-bar' onChange={getCountryInformation(countryName)}>\n            <input id=\"search-bar\" type=\"text\" value={countryName} onChange={handleChange}/>\n      </form>      \n      </header>\n\n\n\n      <div id=\"weather-box\" className='weather-box'>\n        <div className=\"weather-box_header\">\n          <OutputLabel name=\"country\" text={pickedCountry}/>\n        </div>\n\n        <div className='weather-box_main'>\n          <OutputLabel name=\"weather\" text={pickedWeather}/>\n          <OutputLabel name=\"temperature\" text={pickedTemperature}/>\n        </div>\n      </div>\n    </>\n\n\n  );\n}\n\nexport default App;\n","C:\\Users\\scrib\\Desktop\\PERSONAL CODING\\2023-coding\\react-weather-app\\src\\components\\OutputLabel.js",[],[],{"ruleId":"23","severity":1,"message":"24","line":2,"column":9,"nodeType":"25","messageId":"26","endLine":2,"endColumn":13},{"ruleId":"23","severity":1,"message":"27","line":3,"column":8,"nodeType":"25","messageId":"26","endLine":3,"endColumn":21},{"ruleId":"23","severity":1,"message":"28","line":4,"column":8,"nodeType":"25","messageId":"26","endLine":4,"endColumn":22},{"ruleId":"29","severity":1,"message":"30","line":103,"column":44,"nodeType":"31","messageId":"32","endLine":103,"endColumn":46},"no-unused-vars","'gsap' is defined but never used.","Identifier","unusedVar","'ScrollTrigger' is defined but never used.","'ScrollToPlugin' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]